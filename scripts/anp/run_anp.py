import numpy as np
import matlab.engine
from anp_alg_matlab import AnPAlgorithmMatlab
from anp_alg import AnPAlgorithm
from sonar_data_generator import SonarDataGenerator
from pathlib import Path


# 获取脚本的路径
script_path = Path(__file__).resolve()

# 获取脚本所在的目录
script_dir = script_path.parent
script_dir = str(script_dir) + "/"


if __name__ == "__main__":

    #######################################################################################
    # Defining the arrays as numpy arrays

    # P_SI_Noise = np.array([[ 1.53557878,  2.97694335,  1.24080208,  4.16830343,  0.12264292,
    #     -1.88760664,  0.25295995,  2.30555213, -1.23570279, -1.81025375,
    #      3.77859988,  5.31658054,  3.18133719,  4.52910825,  0.39419601,
    #      5.26687819,  4.65415559,  0.11804805,  2.03730764,  3.48068668,
    #      0.78683522, -0.66816494,  0.18560065, -1.6951984 ,  1.31887624,
    #      3.34682118,  2.95967894, -0.47438892,  4.64086299,  0.67389533,
    #      2.85768604,  3.2226216 , -1.67084475,  1.94888409,  0.59550857],
    #    [ 0.91939284,  1.53492018, -1.35272456,  0.7623958 ,  1.09582634,
    #      0.305866  ,  1.17273072,  2.07974552, -1.32145072, -0.6309893 ,
    #     -0.19178088,  0.05937226,  1.33169354,  0.78075933,  1.40937014,
    #      0.09307059, -0.05707075,  1.74053995, -1.18877871,  0.04310378,
    #      1.59714248,  1.75976657,  1.4132641 , -1.56443147, -1.31670153,
    #      1.44545932, -0.65720055, -0.80249095, -0.10111719,  0.18089272,
    #      1.48970536,  0.45475871,  0.86635821, -0.571252  ,  1.43672797]])
    

    # P_W = np.array([[ 1.06468565,  2.31759309,  0.35106129,  3.633026  , -0.30355716,
    #     -1.99571699, -0.17747571,  1.88155627, -1.5290993 , -1.72765435,
    #      3.16261278,  4.63730969,  2.74471633,  3.97951076, -0.14802812,
    #      4.43218987,  4.04127959, -0.26189836,  0.912736  ,  2.6847464 ,
    #      0.3559706 , -0.81076358, -0.25064624, -1.85310636,  0.4857652 ,
    #      2.9175314 ,  2.15640638, -0.71552746,  3.78229859, -0.26303752,
    #      2.40594241,  2.68300674, -2.03231184,  0.5881672 ,  0.17541774],
    #    [ 2.15335171,  2.22427009,  0.13722424,  1.62571457,  2.30703358,
    #      1.62333665,  2.5212474 ,  2.93972395,  0.29379445,  0.85940493,
    #      0.78559129,  0.75710126,  2.36389638,  1.58152865,  1.96476345,
    #      0.70284667,  0.80582551,  2.11508347,  0.17749674,  0.90879937,
    #      2.60368177,  2.55750701,  2.09008228,  0.09527522,  0.07861022,
    #      2.42931478,  0.36894649,  0.96179572,  0.60865037,  1.34471242,
    #      2.44394798,  1.48191296,  2.30470538,  0.72382554,  2.55085797],
    #    [ 0.4460043 , -0.92815562, -0.36306902,  0.02044748, -0.01997227,
    #     -0.66784918,  0.30280853, -0.58435965, -0.4538    , -0.83419368,
    #      0.38298784, -0.31159393,  0.32168943, -0.10436606, -0.71233136,
    #     -0.93288816,  0.27015596, -0.99035812, -0.77765151, -0.565299  ,
    #     -0.38056115, -0.89752559, -0.637542  , -0.7976791 , -0.17864977,
    #      0.17748862, -0.25419538, -0.21643761, -0.83896555, -0.04488033,
    #     -0.14467027,  0.34145294, -0.1916855 , -0.94122864, -0.19017877]])

    # # {'position': {'x': -1.5445891613683744, 'y': -0.4567485384442697, 'z': -0.27229458068418716}, 
    # #  'orientation': {'x': -0.04960713945346364, 'y': 0.08647622783367295, 'z': -0.04960713945346364, 'w': 0.9937807230220095}}
    
    # T_gt = np.array([[ 0.99015653, -0.09001756,  0.10717691, -0.562109  ],
    #    [ 0.10717691,  0.98012199, -0.16695508,  1.41947194],
    #    [-0.09001756,  0.17679855,  0.98012199,  0.58107842],
    #    [ 0.        ,  0.        ,  0.        ,  1.        ]])
    #######################################################################################
   

    # 初始化参数
    P_W = np.array([[ 1.06468565,  2.31759309,  0.35106129,  3.633026  , -0.30355716,
        -1.99571699, -0.17747571,  1.88155627, -1.5290993 , -1.72765435,
         3.16261278,  4.63730969,  2.74471633,  3.97951076, -0.14802812,
         4.43218987,  4.04127959, -0.26189836,  0.912736  ,  2.6847464 ,
         0.3559706 , -0.81076358, -0.25064624, -1.85310636,  0.4857652 ,
         2.9175314 ,  2.15640638, -0.71552746,  3.78229859, -0.26303752,
         2.40594241,  2.68300674, -2.03231184,  0.5881672 ,  0.17541774],
       [ 2.15335171,  2.22427009,  0.13722424,  1.62571457,  2.30703358,
         1.62333665,  2.5212474 ,  2.93972395,  0.29379445,  0.85940493,
         0.78559129,  0.75710126,  2.36389638,  1.58152865,  1.96476345,
         0.70284667,  0.80582551,  2.11508347,  0.17749674,  0.90879937,
         2.60368177,  2.55750701,  2.09008228,  0.09527522,  0.07861022,
         2.42931478,  0.36894649,  0.96179572,  0.60865037,  1.34471242,
         2.44394798,  1.48191296,  2.30470538,  0.72382554,  2.55085797],
       [ 0.4460043 , -0.92815562, -0.36306902,  0.02044748, -0.01997227,
        -0.66784918,  0.30280853, -0.58435965, -0.4538    , -0.83419368,
         0.38298784, -0.31159393,  0.32168943, -0.10436606, -0.71233136,
        -0.93288816,  0.27015596, -0.99035812, -0.77765151, -0.565299  ,
        -0.38056115, -0.89752559, -0.637542  , -0.7976791 , -0.17864977,
         0.17748862, -0.25419538, -0.21643761, -0.83896555, -0.04488033,
        -0.14467027,  0.34145294, -0.1916855 , -0.94122864, -0.19017877]])
    
    R_SW = np.array([[ 0.99015653, -0.09001756,  0.10717691],
                    [ 0.10717691,  0.98012199, -0.16695508],
                    [-0.09001756,  0.17679855,  0.98012199]])
    
    t_S = np.array([-0.562109, 1.41947194, 0.58107842])
    
    # 模拟生成 P_SI 和 P_SI_Noise 数据
    data_generator = SonarDataGenerator(P_W, R_SW, t_S)
    P_S, P_SI, P_SI_Noise = data_generator.generate_data()
    
    # P_SI = np.array([[ 0.56548323, -1.27047082, -1.85738992,  0.1789736 , -1.248235  ,
    #     -0.99118162, -0.46602198, -0.62105621,  0.29756116,  1.07959907,
    #     -1.29982135, -1.24230951, -1.18010986, -2.22683206, -0.26763217,
    #      2.01139035, -0.29915249,  0.31218737,  0.34621653,  0.32985402,
    #     -1.33647329,  0.46006598, -0.89108452, -2.03794109,  0.44184577,
    #     -2.1068837 , -1.72824164, -0.01886951,  0.29355948, -0.88234462,
    #     -2.49188336],
    #    [ 3.66579091,  2.4745939 ,  3.90667156,  1.65259079,  4.93071629,
    #      3.29387327,  4.68007104,  3.28711958,  2.0644479 ,  2.75259198,
    #      2.34933375,  3.40391507,  4.9948095 ,  5.33583486,  1.14569495,
    #      4.55996479,  3.23818137,  5.66201373,  3.69950014,  2.20104303,
    #      4.6284035 ,  3.19414958,  3.09337704,  4.28315106,  5.32654268,
    #      5.42819121,  4.52602557,  3.00304087,  2.32467454,  4.76071572,
    #      4.99155007]])
    # # P_SI[1, :] = -P_SI[1, :]

    # P_W = np.array([[ 0.13391509,  1.88155672,  2.59134469,  0.35596874,  2.03236189,
    #      1.65109312,  1.20785688,  1.26211583,  0.27220089, -0.4428142 ,
    #      1.9053834 ,  1.92179287,  2.00827889,  3.02093524,  0.77010982,
    #     -1.21540772,  0.99168597,  0.55320954,  0.3462047 ,  0.27400159,
    #      2.13517361,  0.19371735,  1.55160486,  2.76857734,  0.39970748,
    #      2.94687998,  2.50728081,  0.67015598,  0.28999663,  1.68374432,
    #      3.29308046],
    #    [ 2.2377292 ,  0.87944706,  2.23769735,  0.20736371,  3.36005648,
    #      1.74802383,  3.18616388,  1.78470675,  0.62462763,  1.35838453,
    #      0.73308126,  1.82152564,  3.36862621,  3.70451716, -0.35573475,
    #      3.21260296,  1.67410865,  4.19112426,  2.26202155,  0.71028529,
    #      2.98879985,  1.76824144,  1.53149125,  2.6555396 ,  3.8645232 ,
    #      3.76401047,  2.87867657,  1.5204413 ,  0.89032777,  3.17848623,
    #      3.30387284],
    #    [-0.55638466, -0.58436298, -0.80045107, -0.38054636, -0.53673498,
    #     -0.46610571, -0.27077712, -0.28779788, -0.43107905, -0.62704891,
    #     -0.65914704, -0.58538992, -0.97475729, -0.37383822, -0.4611687 ,
    #     -0.94419869, -0.91945621, -0.81109826, -0.44122369, -0.75659842,
    #     -0.94558187, -0.4101462 , -0.63044389, -0.46338449, -0.82042692,
    #     -0.73644806, -0.78892023, -0.59836588, -0.34894413, -0.85623805,
    #     -0.65268598]])
    
    # array([[ 0.99345134,  0.08782999, -0.07307758,  0.39976855],
    #    [-0.07307758,  0.98010902,  0.18451549, -1.44686872],
    #    [ 0.08782999, -0.17796683,  0.98010902, -0.22343436],
    #    [ 0.        ,  0.        ,  0.        ,  1.        ]])
    # array([[ 0.98010902,  0.07307758,  0.18451549, -1.44686872],
    #    [-0.08782999,  0.99345134,  0.07307758, -0.39976855],
    #    [-0.17796683, -0.08782999,  0.98010902, -0.22343436],
    #    [ 0.        ,  0.        ,  0.        ,  1.        ]])
    ##################################
    ## MATLAB ##
    ##################################
    
    print("When there is no noise\n")
    print("PYTHON compare baseline")
    anp_algorithm = AnPAlgorithm()
    t_s_cal, R_sw_cal = anp_algorithm.compute_t_R(P_SI, P_W)
    print(t_s_cal)
    print(R_sw_cal.T)
    print("R error: \n", anp_algorithm.estimate_accuracy(R_SW))
    print("t error: \n", np.linalg.norm(t_s_cal.T-t_S))

    
    ##################################
    ## MATLAB ##
    ##################################
    print("MATLAB for our new algorithm")
    anp_algorithm_matlab = AnPAlgorithmMatlab()
    t_s_cal, R_sw_cal = anp_algorithm_matlab.compute_t_R(P_SI, P_W)
    print("R error: \n", anp_algorithm_matlab.estimate_accuracy(R_SW))
    print("t error: \n", np.linalg.norm(t_s_cal.T-t_S))


#######################################################################
#######################################################################
#######################################################################

    print("When data has noise\n")
    print("PYTHON compare baseline")
    anp_algorithm = AnPAlgorithm()
    t_s_cal, R_sw_cal = anp_algorithm.compute_t_R(P_SI_Noise, P_W)
    print("R error: \n", anp_algorithm.estimate_accuracy(R_SW))
    print("t error: \n", np.linalg.norm(t_s_cal.T-t_S))

    
    ##################################
    ## MATLAB ##
    ##################################
    print("MATLAB for our new algorithm")
    anp_algorithm_matlab = AnPAlgorithmMatlab()
    t_s_cal, R_sw_cal = anp_algorithm_matlab.compute_t_R(P_SI_Noise, P_W)
    print("R error: \n", anp_algorithm_matlab.estimate_accuracy(R_SW))
    print("t error: \n", np.linalg.norm(t_s_cal.T-t_S))

    # 估计精度
    # k, theta = anp_algorithm_matlab.estimate_accuracy(R_SW)
    # print("估计的精度 theta:", theta)

