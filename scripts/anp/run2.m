% MATLAB script to test compute_t_R function

% Initialize parameters
clc
clear

point_num = 20;
P_W = randn(3,point_num)*5 + randn(3,point_num)*5;
% isRotationMatrix(R_SW )
% R_SW = [ 0.99015653, -0.09001756,  0.10717691;
%          0.10717691,  0.98012199, -0.16695508;
%         -0.09001756,  0.17679855,  0.98012199];

% P_W = [
%    -1.38660717, -2.35341692, -2.17523289, -1.25887418, -1.76831245,  0.58669752,  1.18843973, -0.1515867 ,  0.67467397, -1.67420828, -2.77094769, -1.23726094, -1.33151364, -2.67628932, -0.01532792, -2.08085012, -2.86501884, -0.68202037, -2.38799381, -2.54970336, -0.42283136, -0.64948553;
%    -2.12936354, -1.1439904 , -1.2776773 , -1.77900851, -5.2710743 , -3.24825454, -2.67612004, -2.27082896, -1.9069531 , -1.96464503, -1.04094589, -0.80463147, -5.04669428, -2.70052958, -2.13126016, -2.91140866, -1.70948327, -2.033741  , -3.73906279, -5.07786322, -1.568964  , -2.75520921;
%     0.8920483 ,  1.48197484,  1.88178122,  0.62711102,  1.54477298,  1.02458489,  0.89946163,  1.04464602,  0.80771899,  1.49477398,  0.72021079,  0.55844587,  0.98681056,  1.94200408,  1.00018442,  0.53257984,  0.10973129,  0.89233363,  0.90292549,  0.5518285 ,  1.14766133,  0.50296474
% ];

T = [
   -9.95039499e-01, -8.36952708e-04,  9.94771124e-02,  2.61197551e+00;
   -1.21701694e-16, -9.99964608e-01, -8.41322257e-03, -3.00000000e+00;
    9.94806332e-02, -8.37148877e-03,  9.95004282e-01,  4.91586678e-01;
    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00
];

R_SW = T(1:3,1:3)
t_S = T(1:3,4)

P_S_est = R_SW'*(P_W - t_S);

d = vecnorm(P_S_est);
tan_theta = P_S_est(2,:)./P_S_est(1,:);
cos_theta = P_S_est(1,:)./vecnorm(P_S_est(1:2,:));
sin_theta = P_S_est(2,:)./vecnorm(P_S_est(1:2,:));
theta_est = atan(tan_theta);

P_SI(1,:) = d.*cos_theta;
P_SI(2,:) = d.*sin_theta;
 



% [ R_sw_cal,t_s_cal] = compute_t_R(P_W, P_SI,0,0);
% [ R_sw_app,t_s_app] = Wang_app_algorithm(P_W, P_SI,-R_SW'*t_S,0);
[ R_sw_nonapp,t_s_nonapp] = Wang_nonapp_algorithm(P_W, P_SI,R_SW);




% Display results
disp('nonapp with no noise:');
disp(R_sw_nonapp-R_SW);
disp(t_s_nonapp-t_S);


% cmp = [
%     4.01908195,  5.05850267,  4.97308252,  3.87342078,  4.49891218,  2.09326913,  1.47926563,  2.81626498,  1.96148104,  4.39891559,  5.38787752,  3.84729896,  3.97462145,  5.48416702,  2.67461197,  4.69295297,  5.48808389,  3.31776469,  5.01630052,  5.1572852 ,  3.10010671,  3.26074458;
%    -0.87192988, -1.86695758, -1.7548746 , -1.22209399,  2.28360798,  0.24881444, -0.33113849, -0.73433448, -1.09586379, -1.04934707, -1.95920202, -2.1983913 ,  2.04647434, -0.31089812, -0.87351335, -0.08537021, -1.3005134 , -0.96641773,  0.74009649,  2.08872131, -1.44095198, -0.24373711
% ];
% [ R_sw_nonapp_py,t_s_nonapp_py] = Wang_nonapp_algorithm(P_W, cmp,R_SW);
% disp('nonapp with noise:');
% disp(R_sw_nonapp_py-R_SW);
% disp(t_s_nonapp_py-t_S);




% disp(r_1(2,:)*R_true(2,1))
%     if r_1(2,:)*R_true(2,1) > 0
%         r = r_1; 
%         t_S_Noise_He = inv(W_Noise_He' * W_Noise_He) * W_Noise_He' * H_Noise_He * r_2;
%         disp("1");
%     else
%         r = r_2; 
%         t_S_Noise_He = inv(W_Noise_He' * W_Noise_He) * W_Noise_He' * H_Noise_He * r_1;
%         disp("2");
%     end
% 
%     % 计算旋转矩阵 R_Noise_He
%     R_Noise_He = zeros(3, 3);
%     R_Noise_He(1, 1:3) = r(1:3)';  
%     R_Noise_He(2, 1:3) = r(4:6)'; 
%     R_Noise_He(3, 1:3) = cross(r(1:3), r(4:6)); 
% 
%     % 判断是否为旋转矩阵并进行矫正s
%     if ~isRotationMatrix(R_Noise_He)
%         R_Noise_He_new = ToRotationMatrix(R_Noise_He);
%     else
%         R_Noise_He_new = R_Noise_He;
%     end
% 
%     t_z =  cal_tz(R_Noise_He,P_W,t_S_Noise_He,P_SI_Noise,0);
%     t_S_Noise_He = [t_S_Noise_He; t_z];
% 
%     t_S_Noise_He = -R_Noise_He'*t_S_Noise_He;
% 
%     R_Noise_He_new = R_Noise_He_new';

