import numpy as np

# Pose: [[0.9831495919305808, -0.18280284430700852, 0.0, -1.6576626320590806], [0.18280284430700852, 0.9831495919305808, 0.0, 0.4605763629956814], [0.0, 0.0, 1.0, 0.2640484375599803], [0.0, 0.0, 0.0, 1.0]]; theta_Rho: [[0.31165045499801636, 3.6955461502075195]]; s_p: [[3.5089612007141113, -1.1304057836532593, -0.25775113701820374]]; w_p: [[2.0, 0.0, 0.0]]
# Pose: [[0.9277975520443236, -0.37308404203417866, 0.0, 1.67979469674189], [0.37308404203417866, 0.9277975520443236, 0.0, -0.09749330968347869], [0.0, 0.0, 1.0, -0.08616022059694262], [0.0, 0.0, 0.0, 1.0]]; theta_Rho: [[0.08677706122398376, 0.34562981128692627]]; s_p: [[0.33345890045166016, -0.029009435325860977, 0.08616022020578384]]; w_p: [[2.0, 0.0, 0.0]]

theta_Rho = np.array([[0.31165045499801636, 3.6955461502075195]]) 
theta_Rho_prime = np.array([[0.08677706122398376, 0.34562981128692627]]) 
Pose0 =  np.array([[0.9831495919305808, -0.18280284430700852, 0.0, -1.6576626320590806], [0.18280284430700852, 0.9831495919305808, 0.0, 0.4605763629956814], [0.0, 0.0, 1.0, 0.2640484375599803], [0.0, 0.0, 0.0, 1.0]])
Pose1 =  np.array([[0.9277975520443236, -0.37308404203417866, 0.0, 1.67979469674189], [0.37308404203417866, 0.9277975520443236, 0.0, -0.09749330968347869], [0.0, 0.0, 1.0, -0.08616022059694262], [0.0, 0.0, 0.0, 1.0]])


d0 = theta_Rho[0][1]  # example value for r
d1 = theta_Rho_prime[0][1] # example value for r'
theta0 = theta_Rho[0][0]
theta1 = theta_Rho_prime[0][0]  # 30 degrees

T_z_90 = np.array([[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])
R_z_90 = T_z_90[:3, :3]

T_matrix = (Pose0 @ np.linalg.inv(Pose1)).T
# T_matrix = T_z_90 @ T_matrix
R_matrix = T_matrix[:3, :3]

P0 = np.array([3.5089612007141113, -1.1304057836532593, -0.25775113701820374])
# P1 = np.array([0.33345890045166016, -0.029009435325860977, 0.08616022020578384])

# P0 = np.linalg.inv(T_z_90) @ T_matrix @ T_z_90 @ P0
P0 = R_z_90 @ P0

t = T_matrix[:3, 3]
r1 = R_matrix[0, :]
r2 = R_matrix[1, :]
# P_1 = R_matrix@P0 + t
# print(P_1)
# res = np.linalg.inv(R_z_90) @ P_1

# 計算 θ' (phi)
numerator = r1 @ P0 + t[0]
denominator = r2 @ P0 + t[1]
theta_prime_phi = np.arctan2(numerator, denominator)

# 計算 ℜ' (phi)
norm_P_prime = np.sqrt(d0**2 + np.linalg.norm(t)**2 + 2 * (t.T @ R_matrix @ P0))

print("theta_prime_phi:", theta_prime_phi)
print("norm_P_prime:", norm_P_prime)
